version: '3'
services:

  admin_pgadmin:
    container_name: admin_pgadmin
    image: dpage/pgadmin4
    ports:
      - "4444:80"
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      COMPOSE_PROJECT_NAME: ${COMPOSE_PROJECT_NAME}
    networks:
      - admin_panel

  admin_postgres:
    container_name: admin_postgres
    image: postgres:13.0-alpine
    ports:
      - "5432:5432"
    expose:
      - "5432"
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - admin_panel

  admin_django:
    container_name: admin_django
    build:
      context: ../movies_admin
      args:
        POETRY_VERSION: ${POETRY_VERSION}
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_SCHEMAS: ${DB_SCHEMAS}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DEBUG: ${DEBUG}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
    expose:
      - "8000"
    restart: always
    depends_on:
      - admin_postgres
    volumes:
      - static_volume:/opt/app/static/:rw
      - media_volume:/opt/app/media/:rw
    networks:
      - admin_panel

  admin_nginx:
    container_name: admin_nginx
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/admin_panel.conf:/etc/nginx/conf.d/admin_panel.conf
      - ./nginx/index.html:/var/html/index.html
      - static_volume:/var/html/static/:ro
      - media_volume:/var/html/media/:ro
    depends_on:
      - admin_django
    restart: always
    ports:
      - "80:80"
    networks:
      - admin_panel

  admin_swagger:
    container_name: admin_swagger
    image: swaggerapi/swagger-ui
    volumes:
      - ../movies_admin/movies/api/v1/docs/openapi.yaml:/swagger.yaml
    environment:
      - SWAGGER_JSON=/swagger.yaml
    depends_on:
      - admin_nginx
    restart: always
    ports:
      - "8080:8080"
    networks:
      - admin_panel

volumes:
  static_volume:
  media_volume:
  postgres_data:

networks:
  admin_panel:
    driver: bridge
